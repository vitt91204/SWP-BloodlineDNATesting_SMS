import { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { testRequestAPI } from '@/api/axios';
import { Navigation } from "@/components/Navigation";
import { Footer } from "@/components/Footer";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Calendar, MapPin, Home, Users, TestTube, Clock, CheckCircle, ArrowRight, Package } from "lucide-react";

export default function Booking() { 
  const navigate = useNavigate();
  const [selectedService, setSelectedService] = useState("");
  const [selectedRelationship, setSelectedRelationship] = useState("");
  const [selectedLocation, setSelectedLocation] = useState("");
  const [selectedHomeOption, setSelectedHomeOption] = useState("");
  const [selectedDate, setSelectedDate] = useState("");
  const [selectedTimeSlot, setSelectedTimeSlot] = useState("");
  const [step, setStep] = useState(1);

  // Th√™m state cho form data
  const [formData, setFormData] = useState({
    fullName: "",
    phone: "",
    email: "",
    address: "",
    numberOfPeople: "",
    notes: ""
  });

  // Th√™m state ƒë·ªÉ theo d√µi khi n√†o hi·ªÉn th·ªã validation
  const [showValidation, setShowValidation] = useState(false);

  const services = [
    {
      id: "civil",
      name: "X√©t nghi·ªám huy·∫øt th·ªëng d√¢n s·ª±",
      price: "2.500.000 - 5.000.000 VNƒê",
      duration: "5-14 ng√†y",
      locations: ["home", "facility"],
      description: "X√©t nghi·ªám ADN cho m·ª•c ƒë√≠ch c√° nh√¢n, kh√¥ng c√≥ gi√° tr·ªã ph√°p l√Ω"
    },
    {
      id: "legal",
      name: "X√©t nghi·ªám huy·∫øt th·ªëng h√†nh ch√≠nh",
      price: "3.500.000 - 6.000.000 VNƒê",
      duration: "7-14 ng√†y",
      locations: ["facility"],
      description: "X√©t nghi·ªám ADN c√≥ gi√° tr·ªã ph√°p l√Ω, ƒë∆∞·ª£c th·ª±c hi·ªán t·∫°i c∆° s·ªü"
    }
  ];

  // Th√™m danh s√°ch c√°c lo·∫°i quan h·ªá
  const relationships = [
    {
      id: "paternity",
      name: "X√©t nghi·ªám cha con",
      civilPrice: "2.500.000 - 3.500.000 VNƒê",
      legalPrice: "3.500.000 - 4.500.000 VNƒê",
      duration: "5-7 ng√†y",
      description: "X√°c ƒë·ªãnh m·ªëi quan h·ªá huy·∫øt th·ªëng gi·ªØa cha v√† con",
      accuracy: "99.9%"
    },
    {
      id: "maternity",
      name: "X√©t nghi·ªám m·∫π con",
      civilPrice: "2.500.000 - 3.500.000 VNƒê",
      legalPrice: "3.500.000 - 4.500.000 VNƒê",
      duration: "5-7 ng√†y",
      description: "X√°c ƒë·ªãnh m·ªëi quan h·ªá huy·∫øt th·ªëng gi·ªØa m·∫π v√† con",
      accuracy: "99.9%"
    },
    {
      id: "sibling",
      name: "X√©t nghi·ªám anh ch·ªã em ru·ªôt",
      civilPrice: "3.000.000 - 4.500.000 VNƒê",
      legalPrice: "4.000.000 - 5.500.000 VNƒê",
      duration: "7-10 ng√†y",
      description: "X√°c ƒë·ªãnh m·ªëi quan h·ªá huy·∫øt th·ªëng gi·ªØa anh ch·ªã em ru·ªôt",
      accuracy: "95-99%"
    },
    {
      id: "grandparent",
      name: "X√©t nghi·ªám √¥ng b√† - ch√°u",
      civilPrice: "3.500.000 - 5.000.000 VNƒê",
      legalPrice: "4.500.000 - 6.000.000 VNƒê",
      duration: "7-14 ng√†y",
      description: "X√°c ƒë·ªãnh m·ªëi quan h·ªá huy·∫øt th·ªëng gi·ªØa √¥ng b√† v√† ch√°u",
      accuracy: "90-95%"
    }
  ];

  const locations = [
    {
      id: "home",
      name: "Thu m·∫´u t·∫°i nh√†",
      description: "L·ª±a ch·ªçn h√¨nh th·ª©c thu m·∫´u t·∫°i nh√†",
      icon: Home,
      benefits: [
        "Ti·ªán l·ª£i, tho·∫£i m√°i",
        "Ri√™ng t∆∞ cao",
        "Ph√π h·ª£p v·ªõi tr·∫ª em",
        "Ti·∫øt ki·ªám th·ªùi gian"
      ]
    },
    {
      id: "facility",
      name: "Thu m·∫´u t·∫°i c∆° s·ªü",
      description: "ƒê·∫øn tr·ª±c ti·∫øp c∆° s·ªü y t·∫ø",
      icon: MapPin,
      benefits: [
        "Chuy√™n nghi·ªáp",
        "Trang thi·∫øt b·ªã ƒë·∫ßy ƒë·ªß",
        "T∆∞ v·∫•n tr·ª±c ti·∫øp",
        "X·ª≠ l√Ω nhanh ch√≥ng"
      ]
    }
  ];

  // Th√™m home options
  const homeOptions = [
    {
      id: "staff_visit",
      name: "Nh√¢n vi√™n ƒë·∫øn thu m·∫´u",
      description: "Nh√¢n vi√™n chuy√™n nghi·ªáp ƒë·∫øn t·∫≠n nh√† thu m·∫´u",
      icon: Users,
      benefits: [
        "Chuy√™n nghi·ªáp, an to√†n",
        "T∆∞ v·∫•n tr·ª±c ti·∫øp",
        "ƒê·∫£m b·∫£o ch·∫•t l∆∞·ª£ng m·∫´u",
        "Kh√¥ng lo l·∫Øng v·ªÅ k·ªπ thu·∫≠t"
      ],
      requiresSchedule: true
    },
    {
      id: "diy_kit",
      name: "G·ª≠i b·ªô kit t·ª± thu m·∫´u",
      description: "G·ª≠i b·ªô kit v√† h∆∞·ªõng d·∫´n ƒë·ªÉ b·∫°n t·ª± thu m·∫´u",
      icon: Package,
      benefits: [
        "Ho√†n to√†n ri√™ng t∆∞",
        "Linh ho·∫°t v·ªÅ th·ªùi gian",
        "H∆∞·ªõng d·∫´n chi ti·∫øt",
        "Giao nh·∫≠n t·∫≠n n∆°i"
      ],
      requiresSchedule: false
    }
  ];

  // Th√™m time slots c·ªë ƒë·ªãnh
  const timeSlots = [
    { id: "08:00", time: "08:00", label: "08:00 - 09:00", available: true },
    { id: "09:00", time: "09:00", label: "09:00 - 10:00", available: true },
    { id: "10:00", time: "10:00", label: "10:00 - 11:00", available: false },
    { id: "11:00", time: "11:00", label: "11:00 - 12:00", available: true },
    { id: "13:00", time: "13:00", label: "13:00 - 14:00", available: true },
    { id: "14:00", time: "14:00", label: "14:00 - 15:00", available: true },
    { id: "15:00", time: "15:00", label: "15:00 - 16:00", available: false },
    { id: "16:00", time: "16:00", label: "16:00 - 17:00", available: true },
    { id: "18:00", time: "18:00", label: "18:00 - 19:00", available: true },
    { id: "19:00", time: "19:00", label: "19:00 - 20:00", available: true },
  ];

  // H√†m ki·ªÉm tra validation c√°c tr∆∞·ªùng b·∫Øt bu·ªôc
  const isStep3Valid = () => {
    const requiredFields = formData.fullName && formData.phone && formData.numberOfPeople && formData.address;
    
    if (selectedLocation === 'home') {
      const homeOptionData = homeOptions.find(opt => opt.id === selectedHomeOption);
      if (homeOptionData?.requiresSchedule) {
        return requiredFields && selectedDate && selectedTimeSlot;
      }
      return requiredFields;
    }
    
    return requiredFields;
  };

  // H√†m c·∫≠p nh·∫≠t form data
  const updateFormData = (field, value) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  // H√†m x·ª≠ l√Ω khi nh·∫•n "Ti·∫øp t·ª•c" ·ªü step 3
  const handleStep3Continue = () => {
    if (isStep3Valid()) {
      setStep(4);
      setShowValidation(false); // Reset validation state
    } else {
      setShowValidation(true); // Hi·ªÉn th·ªã validation errors
    }
  };

  // H√†m x·ª≠ l√Ω khi nh·∫•n "X√°c nh·∫≠n ƒë·∫∑t l·ªãch" - chuy·ªÉn ƒë·∫øn trang thanh to√°n
  const handleConfirmBooking = async () => {
  try {
    const userData = JSON.parse(localStorage.getItem('userData') || '{}');
    const userId = userData?.id || userData?.userId;
    const serviceIdMap = { civil: 1, legal: 2 };
    const serviceId = serviceIdMap[selectedService] || 0;

    if (!userId || !serviceId) {
      alert('Vui l√≤ng ƒëƒÉng nh·∫≠p v√† ch·ªçn d·ªãch v·ª• h·ª£p l·ªá tr∆∞·ªõc khi ƒë·∫∑t l·ªãch!');
      return;
    }

    // ƒê·∫£m b·∫£o collectionType ƒë√∫ng ƒë·ªãnh d·∫°ng enum backend: 'AtClinic', 'AtHome', 'Self'
    let collectionType = 'At Clinic';
    if (selectedLocation === 'home') {
      collectionType = selectedHomeOption === 'At Clinic ' ? 'Self' : 'At Home';
    }

    const bookingData = {
      userId,
      serviceId,
      collectionType,
      status: 'Pending',
      appointmentDate: selectedDate || new Date().toISOString().split('T')[0],
      slotTime: selectedTimeSlot || '',
      staffId: 0,
      fullName: formData.fullName,
      phone: formData.phone,
      email: formData.email,
      address: formData.address,
      numberOfPeople: formData.numberOfPeople,
      notes: formData.notes
    };

    console.log('üì¶ G·ª≠i booking:', bookingData);
    const response = await testRequestAPI.create(bookingData);
    console.log('‚úÖ Booking th√†nh c√¥ng:', response);

    const bookingId = response?.id || response?.bookingId;
    if (bookingId) {
      localStorage.setItem('bookingId', bookingId);
      navigate(`/payment?bookingId=${bookingId}`);
    } else {
      navigate('/payment');
    }
  } catch (error) {
    let message = 'ƒê·∫∑t l·ªãch th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i!';
    if (error?.response?.data?.message) {
      message = `ƒê·∫∑t l·ªãch th·∫•t b·∫°i: ${error.response.data.message}`;
    } else if (error?.message) {
      message = `ƒê·∫∑t l·ªãch th·∫•t b·∫°i: ${error.message}`;
    }
    alert(message);
    console.error('‚ùå Booking l·ªói:', error);
  }
};


  const BookingSteps = () => {
    const steps = [
      { number: 1, title: "Ch·ªçn d·ªãch v·ª•", description: "D√¢n s·ª± ho·∫∑c h√†nh ch√≠nh" },
      { number: 2, title: "Lo·∫°i quan h·ªá", description: "Ch·ªçn lo·∫°i x√©t nghi·ªám" },
      { number: 3, title: "H√¨nh th·ª©c", description: "Thu m·∫´u t·∫°i nh√† ho·∫∑c c∆° s·ªü" },
      { number: 4, title: "Th√¥ng tin", description: "ƒêi·ªÅn th√¥ng tin c√° nh√¢n" },
      { number: 5, title: "X√°c nh·∫≠n", description: "X√°c nh·∫≠n v√† thanh to√°n" }
    ];

    return (
      <div className="flex justify-center mb-8">
        <div className="flex items-center space-x-2 md:space-x-4">
          {steps.map((stepItem, index) => (
            <div key={stepItem.number} className="flex items-center">
              <div className={`flex flex-col items-center ${step >= stepItem.number ? 'text-blue-600' : 'text-gray-400'}`}>
                <div className={`w-8 h-8 md:w-10 md:h-10 rounded-full flex items-center justify-center text-xs md:text-sm font-medium ${
                  step >= stepItem.number 
                    ? 'bg-blue-600 text-white' 
                    : 'bg-gray-200 text-gray-600'
                }`}>
                  {step > stepItem.number ? <CheckCircle className="w-4 h-4 md:w-5 md:h-5" /> : stepItem.number}
                </div>
                <div className="text-xs mt-1 md:mt-2 text-center max-w-16 md:max-w-none">
                  <div className="font-medium text-xs md:text-sm">{stepItem.title}</div>
                  <div className="text-gray-500 hidden md:block">{stepItem.description}</div>
                </div>
              </div>
              {index < steps.length - 1 && (
                <ArrowRight className={`w-4 h-4 mx-1 md:mx-4 ${step > stepItem.number ? 'text-blue-600' : 'text-gray-400'}`} />
              )}
            </div>
          ))}
        </div>
      </div>
    );
  };

  // G·ªçi API ƒë·ªÉ l·∫•y th√¥ng tin ng∆∞·ªùi d√πng (n·∫øu c√≥) v√† thi·∫øt l·∫≠p d·ªØ li·ªáu ban ƒë·∫ßu cho form
  useEffect(() => {
    // L·∫•y th√¥ng tin user t·ª´ localStorage n·∫øu c√≥
    const userData = localStorage.getItem('userData');
    if (userData) {
      try {
        const user = JSON.parse(userData);
        setFormData(prev => ({
          ...prev,
          fullName: user.fullName || user.name || "",
          phone: user.phone || "",
          email: user.email || "",
          address: user.address || ""
        }));
      } catch (e) {}
    }
  }, []);

  return (
    <div className="min-h-screen bg-gray-50">
      <Navigation />
      
      <div className="pt-20 pb-12">
        <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
          {/* Header */}
          <div className="text-center mb-12">
            <Badge className="bg-green-100 text-green-700 mb-4">
              ƒê·∫∑t l·ªãch x√©t nghi·ªám
            </Badge>
            <h1 className="text-4xl font-bold text-gray-900 mb-4">
              ƒê·∫∑t l·ªãch x√©t nghi·ªám ADN
            </h1>
            <p className="text-xl text-gray-600">
              Ch·ªâ v·ªõi v√†i b∆∞·ªõc ƒë∆°n gi·∫£n ƒë·ªÉ ƒë·∫∑t l·ªãch x√©t nghi·ªám ADN chuy√™n nghi·ªáp
            </p>
          </div>

          <BookingSteps />

          {/* Step 1: Select Service Type */}
          {step === 1 && (
            <Card>
              <CardHeader>
                <CardTitle>Ch·ªçn lo·∫°i d·ªãch v·ª• x√©t nghi·ªám</CardTitle>
                <CardDescription>
                  L·ª±a ch·ªçn lo·∫°i d·ªãch v·ª• ph√π h·ª£p v·ªõi m·ª•c ƒë√≠ch s·ª≠ d·ª•ng
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                {services.map((service) => (
                  <div
                    key={service.id}
                    className={`p-6 border-2 rounded-lg cursor-pointer transition-all ${
                      selectedService === service.id
                        ? 'border-blue-500 bg-blue-50'
                        : 'border-gray-200 hover:border-gray-300'
                    }`}
                    onClick={() => setSelectedService(service.id)}
                  >
                    <div className="flex justify-between items-start">
                      <div className="flex-1">
                        <div className="flex items-center justify-between mb-3">
                          <h3 className="text-xl font-semibold text-gray-900">
                            {service.name}
                          </h3>
                          <div className={`w-6 h-6 rounded-full border-2 flex-shrink-0 ml-4 ${
                            selectedService === service.id
                              ? 'border-blue-500 bg-blue-500'
                              : 'border-gray-300'
                          }`}>
                            {selectedService === service.id && (
                              <CheckCircle className="w-5 h-5 text-white" />
                            )}
                          </div>
                        </div>
                        
                        <p className="text-gray-600 mb-4">
                          {service.description}
                        </p>
                        
                        <div className="flex flex-wrap items-center gap-4 text-sm text-gray-600 mb-4">
                          <div className="flex items-center">
                            <TestTube className="w-4 h-4 mr-1" />
                            <span className="font-medium text-blue-600">{service.price}</span>
                          </div>
                          <div className="flex items-center">
                            <Clock className="w-4 h-4 mr-1" />
                            {service.duration}
                          </div>
                        </div>
                        
                        <div className="flex items-center space-x-2">
                          <span className="text-sm text-gray-500">H√¨nh th·ª©c:</span>
                          {service.locations.includes('home') && (
                            <Badge variant="outline" className="text-xs">
                              <Home className="w-3 h-3 mr-1" />
                              T·∫°i nh√†
                            </Badge>
                          )}
                          {service.locations.includes('facility') && (
                            <Badge variant="outline" className="text-xs">
                              <MapPin className="w-3 h-3 mr-1" />
                              T·∫°i c∆° s·ªü
                            </Badge>
                          )}
                        </div>
                      </div>
                    </div>
                  </div>
                ))}
                
                <div className="pt-6">
                  <Button 
                    className="w-full" 
                    disabled={!selectedService}
                    onClick={() => setStep(2)}
                  >
                    Ti·∫øp t·ª•c
                    <ArrowRight className="w-4 h-4 ml-2" />
                  </Button>
                </div>
              </CardContent>
            </Card>
          )}

          {/* Step 2: Select Relationship Type */}
          {step === 2 && (
            <Card>
              <CardHeader>
                <CardTitle>Ch·ªçn lo·∫°i quan h·ªá c·∫ßn x√©t nghi·ªám</CardTitle>
                <CardDescription>
                  L·ª±a ch·ªçn lo·∫°i quan h·ªá huy·∫øt th·ªëng c·∫ßn x√°c ƒë·ªãnh
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="grid gap-4">
                  {relationships.map((relationship) => (
                    <div
                      key={relationship.id}
                      className={`p-4 border-2 rounded-lg cursor-pointer transition-all ${
                        selectedRelationship === relationship.id
                          ? 'border-blue-500 bg-blue-50'
                          : 'border-gray-200 hover:border-gray-300'
                      }`}
                      onClick={() => setSelectedRelationship(relationship.id)}
                    >
                      <div className="flex justify-between items-start">
                        <div className="flex-1">
                          <div className="flex items-center justify-between mb-2">
                            <h3 className="text-lg font-semibold text-gray-900">
                              {relationship.name}
                            </h3>
                            <div className={`w-6 h-6 rounded-full border-2 flex-shrink-0 ml-4 ${
                              selectedRelationship === relationship.id
                                ? 'border-blue-500 bg-blue-500'
                                : 'border-gray-300'
                            }`}>
                              {selectedRelationship === relationship.id && (
                                <CheckCircle className="w-5 h-5 text-white" />
                              )}
                            </div>
                          </div>
                          
                          <p className="text-gray-600 text-sm mb-3">
                            {relationship.description}
                          </p>
                          
                          <div className="flex flex-wrap items-center gap-4 text-sm text-gray-600">
                            <div className="flex items-center">
                              <TestTube className="w-4 h-4 mr-1" />
                              <span className="font-medium text-blue-600">
                                {selectedService === 'civil' ? relationship.civilPrice : relationship.legalPrice}
                              </span>
                            </div>
                            <div className="flex items-center">
                              <Clock className="w-4 h-4 mr-1" />
                              {relationship.duration}
                            </div>
                            <div className="flex items-center">
                              <CheckCircle className="w-4 h-4 mr-1 text-green-500" />
                              ƒê·ªô ch√≠nh x√°c: {relationship.accuracy}
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
                
                <div className="flex space-x-4">
                  <Button variant="outline" onClick={() => setStep(1)} className="flex-1">
                    Quay l·∫°i
                  </Button>
                  <Button 
                    className="flex-1" 
                    disabled={!selectedRelationship}
                    onClick={() => setStep(3)}
                  >
                    Ti·∫øp t·ª•c
                    <ArrowRight className="w-4 h-4 ml-2" />
                  </Button>
                </div>
              </CardContent>
            </Card>
          )}

          {/* Step 3: Select Location */}
          {step === 3 && (
            <Card>
              <CardHeader>
                <CardTitle>Ch·ªçn h√¨nh th·ª©c thu m·∫´u</CardTitle>
                <CardDescription>
                  L·ª±a ch·ªçn ƒë·ªãa ƒëi·ªÉm thu m·∫´u ph√π h·ª£p v·ªõi b·∫°n
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="grid md:grid-cols-2 gap-6">
                  {locations.map((location) => {
                    const Icon = location.icon;
                    const selectedServiceData = services.find(s => s.id === selectedService);
                    const isAvailable = selectedServiceData?.locations.includes(location.id);
                    
                    return (
                      <div
                        key={location.id}
                        className={`p-6 border-2 rounded-lg cursor-pointer transition-all ${
                          !isAvailable 
                            ? 'border-gray-200 bg-gray-50 opacity-50 cursor-not-allowed'
                            : selectedLocation === location.id
                            ? 'border-blue-500 bg-blue-50'
                            : 'border-gray-200 hover:border-gray-300'
                        }`}
                        onClick={() => {
                          if (isAvailable) {
                            setSelectedLocation(location.id);
                            if (location.id !== 'home') {
                              setSelectedHomeOption("");
                            }
                          }
                        }}
                      >
                        <div className="flex items-start justify-between mb-4">
                          <div className={`w-12 h-12 rounded-lg flex items-center justify-center ${
                            selectedLocation === location.id ? 'bg-blue-100' : 'bg-gray-100'
                          }`}>
                            <Icon className={`w-6 h-6 ${
                              selectedLocation === location.id ? 'text-blue-600' : 'text-gray-600'
                            }`} />
                          </div>
                          {!isAvailable && (
                            <Badge variant="outline" className="text-xs">
                              Kh√¥ng kh·∫£ d·ª•ng
                            </Badge>
                          )}
                        </div>
                        
                        <h3 className="text-lg font-semibold text-gray-900 mb-2">
                          {location.name}
                        </h3>
                        <p className="text-gray-600 text-sm mb-4">
                          {location.description}
                        </p>
                        
                        <ul className="space-y-2">
                          {location.benefits.map((benefit, index) => (
                            <li key={index} className="flex items-center text-sm text-gray-700">
                              <CheckCircle className="w-4 h-4 text-green-500 mr-2 flex-shrink-0" />
                              {benefit}
                            </li>
                          ))}
                        </ul>
                      </div>
                    );
                  })}
                </div>

                {/* Home Options - Show when home is selected */}
                {selectedLocation === 'home' && (
                  <div className="mt-8">
                    <h3 className="text-lg font-semibold text-gray-900 mb-4">
                      Ch·ªçn h√¨nh th·ª©c thu m·∫´u t·∫°i nh√†
                    </h3>
                    <div className="grid md:grid-cols-2 gap-4">
                      {homeOptions.map((option) => {
                        const Icon = option.icon;
                        return (
                          <div
                            key={option.id}
                            className={`p-4 border-2 rounded-lg cursor-pointer transition-all ${
                              selectedHomeOption === option.id
                                ? 'border-blue-500 bg-blue-50'
                                : 'border-gray-200 hover:border-gray-300'
                            }`}
                            onClick={() => {
                              setSelectedHomeOption(option.id);
                              // Reset date and time if switching to DIY kit
                              if (option.id === 'diy_kit') {
                                setSelectedDate("");
                                setSelectedTimeSlot("");
                              }
                            }}
                          >
                            <div className="flex items-start justify-between mb-3">
                              <div className={`w-10 h-10 rounded-lg flex items-center justify-center ${
                                selectedHomeOption === option.id ? 'bg-blue-100' : 'bg-gray-100'
                              }`}>
                                <Icon className={`w-5 h-5 ${
                                  selectedHomeOption === option.id ? 'text-blue-600' : 'text-gray-600'
                                }`} />
                              </div>
                              <div className={`w-5 h-5 rounded-full border-2 ${
                                selectedHomeOption === option.id
                                  ? 'border-blue-500 bg-blue-500'
                                  : 'border-gray-300'
                              }`}>
                                {selectedHomeOption === option.id && (
                                  <CheckCircle className="w-4 h-4 text-white" />
                                )}
                              </div>
                            </div>
                            
                            <h4 className="font-semibold text-gray-900 mb-2">
                              {option.name}
                            </h4>
                            <p className="text-gray-600 text-sm mb-3">
                              {option.description}
                            </p>
                            
                            <ul className="space-y-1">
                              {option.benefits.map((benefit, index) => (
                                <li key={index} className="flex items-center text-xs text-gray-700">
                                  <CheckCircle className="w-3 h-3 text-green-500 mr-1 flex-shrink-0" />
                                  {benefit}
                                </li>
                              ))}
                            </ul>
                          </div>
                        );
                      })}
                    </div>
                  </div>
                )}
                
                <div className="flex space-x-4">
                  <Button variant="outline" onClick={() => setStep(2)} className="flex-1">
                    Quay l·∫°i
                  </Button>
                  <Button 
                    className="flex-1" 
                    disabled={!selectedLocation || (selectedLocation === 'home' && !selectedHomeOption)}
                    onClick={() => setStep(4)}
                  >
                    Ti·∫øp t·ª•c
                    <ArrowRight className="w-4 h-4 ml-2" />
                  </Button>
                </div>
              </CardContent>
            </Card>
          )}

          {/* Step 4: Personal Information */}
          {step === 4 && (
            <Card>
              <CardHeader>
                <CardTitle>Th√¥ng tin c√° nh√¢n</CardTitle>
                <CardDescription>
                  ƒêi·ªÅn th√¥ng tin ƒë·ªÉ ch√∫ng t√¥i c√≥ th·ªÉ li√™n h·ªá v√† thu m·∫´u
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="grid md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      H·ªç v√† t√™n ng∆∞·ªùi ƒë·∫∑t *
                    </label>
                    <Input 
                      placeholder="Nh·∫≠p h·ªç v√† t√™n" 
                      value={formData.fullName}
                      onChange={(e) => updateFormData('fullName', e.target.value)}
                      className={showValidation && !formData.fullName ? 'border-red-300 focus:border-red-500' : ''}
                    />
                    {showValidation && !formData.fullName && (
                      <p className="text-red-500 text-xs mt-1">Vui l√≤ng nh·∫≠p h·ªç v√† t√™n</p>
                    )}
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      S·ªë ƒëi·ªán tho·∫°i *
                    </label>
                    <Input 
                      placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i" 
                      value={formData.phone}
                      onChange={(e) => updateFormData('phone', e.target.value)}
                      className={showValidation && !formData.phone ? 'border-red-300 focus:border-red-500' : ''}
                    />
                    {showValidation && !formData.phone && (
                      <p className="text-red-500 text-xs mt-1">Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i</p>
                    )}
                  </div>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Email
                  </label>
                  <Input 
                    type="email" 
                    placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ email" 
                    value={formData.email}
                    onChange={(e) => updateFormData('email', e.target.value)}
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    ƒê·ªãa ch·ªâ  {selectedLocation === 'home' ? 'thu m·∫´u' : 'li√™n h·ªá'} *
                  </label>
                  <Textarea 
                    placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ chi ti·∫øt..." 
                    rows={3} 
                    value={formData.address}
                    onChange={(e) => updateFormData('address', e.target.value)}
                    className={showValidation && !formData.address ? 'border-red-300 focus:border-red-500' : ''}
                  />
                  {showValidation && !formData.address && (
                    <p className="text-red-500 text-xs mt-1">Vui l√≤ng nh·∫≠p ƒë·ªãa ch·ªâ</p>
                  )}
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    S·ªë ng∆∞·ªùi tham gia x√©t nghi·ªám *
                  </label>
                  <select 
                    className={`w-full px-3 py-2 border rounded-md ${
                      showValidation && !formData.numberOfPeople ? 'border-red-300 focus:border-red-500' : 'border-gray-300'
                    }`}
                    value={formData.numberOfPeople}
                    onChange={(e) => updateFormData('numberOfPeople', e.target.value)}
                  >
                    <option value="">Ch·ªçn s·ªë ng∆∞·ªùi</option>
                    <option value="2">2 ng∆∞·ªùi</option>
                    <option value="3">3 ng∆∞·ªùi</option>
                    <option value="4">4 ng∆∞·ªùi</option>
                    <option value="5">5 ng∆∞·ªùi tr·ªü l√™n</option>
                  </select>
                  {showValidation && !formData.numberOfPeople && (
                    <p className="text-red-500 text-xs mt-1">Vui l√≤ng ch·ªçn s·ªë ng∆∞·ªùi tham gia</p>
                  )}
                </div>

                {selectedLocation === 'home' && selectedHomeOption === 'staff_visit' && (
                  <div className="space-y-4">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Ch·ªçn ng√†y mong mu·ªën *
                      </label>
                      <Input 
                        type="date" 
                        value={selectedDate}
                        onChange={(e) => {
                          setSelectedDate(e.target.value);
                          setSelectedTimeSlot(""); // Reset time slot when date changes
                        }}
                        min={new Date().toISOString().split('T')[0]}
                        className={showValidation && !selectedDate ? 'border-red-300 focus:border-red-500' : ''}
                      />
                      {showValidation && !selectedDate && (
                        <p className="text-red-500 text-xs mt-1">Vui l√≤ng ch·ªçn ng√†y mong mu·ªën</p>
                      )}
                    </div>
                    
                    {selectedDate && (
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-3">
                          Ch·ªçn khung gi·ªù *
                        </label>
                        <div className="grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-4 gap-3">
                          {timeSlots.map((slot) => (
                            <button
                              key={slot.id}
                              type="button"
                              disabled={!slot.available}
                              onClick={() => setSelectedTimeSlot(slot.id)}
                              className={`px-4 py-3 text-sm font-medium rounded-lg border-2 transition-all ${
                                !slot.available
                                  ? 'bg-gray-100 text-gray-400 border-gray-200 cursor-not-allowed'
                                  : selectedTimeSlot === slot.id
                                  ? 'bg-blue-50 text-blue-700 border-blue-500'
                                  : 'bg-white text-gray-700 border-gray-200 hover:border-gray-300 hover:bg-gray-50'
                              }`}
                            >
                              <div className="flex items-center justify-center">
                                <Clock className="w-4 h-4 mr-1" />
                                {slot.label}
                              </div>
                              {!slot.available && (
                                <div className="text-xs text-gray-400 mt-1">
                                  ƒê√£ ƒë·∫∑t
                                </div>
                              )}
                            </button>
                          ))}
                        </div>
                        {selectedTimeSlot && (
                          <div className="mt-3 p-3 bg-green-50 rounded-lg border border-green-200">
                            <div className="flex items-center text-green-700">
                              <CheckCircle className="w-4 h-4 mr-2" />
                              <span className="text-sm font-medium">
                                ƒê√£ ch·ªçn: {timeSlots.find(slot => slot.id === selectedTimeSlot)?.label} ng√†y {selectedDate}
                              </span>
                            </div>
                          </div>
                        )}
                        {showValidation && selectedLocation === 'home' && selectedDate && !selectedTimeSlot && (
                          <div className="mt-3 p-3 bg-red-50 rounded-lg border border-red-200">
                            <p className="text-red-500 text-sm">Vui l√≤ng ch·ªçn khung gi·ªù</p>
                          </div>
                        )}
                      </div>
                    )}
                  </div>
                )}

                {selectedLocation === 'home' && selectedHomeOption === 'diy_kit' && (
                  <div className="p-4 bg-amber-50 rounded-lg border border-amber-200">
                    <div className="flex items-start">
                      <Package className="w-5 h-5 text-amber-600 mr-2 mt-0.5" />
                      <div>
                        <h4 className="font-medium text-amber-800 mb-1">
                          Giao nh·∫≠n b·ªô kit t·ª± thu m·∫´u
                        </h4>
                        <p className="text-sm text-amber-700">
                          Ch√∫ng t√¥i s·∫Ω g·ª≠i b·ªô kit c√πng h∆∞·ªõng d·∫´n chi ti·∫øt ƒë·∫øn ƒë·ªãa ch·ªâ c·ªßa b·∫°n trong v√≤ng 1-2 ng√†y l√†m vi·ªác. 
                          Sau khi thu m·∫´u, vui l√≤ng g·ª≠i l·∫°i theo ƒë·ªãa ch·ªâ ƒë∆∞·ª£c cung c·∫•p.
                        </p>
                      </div>
                    </div>
                  </div>
                )}

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Ghi ch√∫
                  </label>
                  <Textarea 
                    placeholder="Th√¥ng tin b·ªï sung (n·∫øu c√≥)..." 
                    rows={3} 
                    value={formData.notes}
                    onChange={(e) => updateFormData('notes', e.target.value)}
                  />
                </div>

                <div className="flex space-x-4">
                  <Button variant="outline" onClick={() => setStep(3)} className="flex-1">
                    Quay l·∫°i
                  </Button>
                  <Button 
                    className="flex-1" 
                    onClick={() => {
                      if (isStep3Valid()) {
                        setStep(5);
                        setShowValidation(false);
                      } else {
                        setShowValidation(true);
                      }
                    }}
                  >
                    Ti·∫øp t·ª•c
                    <ArrowRight className="w-4 h-4 ml-2" />
                  </Button>
                </div>
              </CardContent>
            </Card>
          )}

          {/* Step 5: Confirmation */}
          {step === 5 && (
            <Card>
              <CardHeader>
                <CardTitle>X√°c nh·∫≠n th√¥ng tin ƒë·∫∑t l·ªãch</CardTitle>
                <CardDescription>
                  Vui l√≤ng ki·ªÉm tra l·∫°i th√¥ng tin tr∆∞·ªõc khi x√°c nh·∫≠n
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="p-6 bg-gray-50 rounded-lg">
                  <h3 className="text-lg font-semibold text-gray-900 mb-4">T√≥m t·∫Øt ƒë·∫∑t l·ªãch</h3>
                  
                  <div className="space-y-4">
                    <div className="flex justify-between">
                      <span className="text-gray-600">Lo·∫°i d·ªãch v·ª•:</span>
                      <span className="font-medium">
                        {services.find(s => s.id === selectedService)?.name}
                      </span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-600">Lo·∫°i quan h·ªá:</span>
                      <span className="font-medium">
                        {relationships.find(r => r.id === selectedRelationship)?.name}
                      </span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-600">H√¨nh th·ª©c:</span>
                      <span className="font-medium">
                        {locations.find(l => l.id === selectedLocation)?.name}
                        {selectedLocation === 'home' && selectedHomeOption && (
                          <div className="text-sm text-gray-500 mt-1">
                            ‚Üí {homeOptions.find(opt => opt.id === selectedHomeOption)?.name}
                          </div>
                        )}
                      </span>
                    </div>
                    {selectedLocation === 'home' && selectedHomeOption === 'staff_visit' && selectedDate && selectedTimeSlot && (
                      <div className="flex justify-between">
                        <span className="text-gray-600">L·ªãch h·∫πn:</span>
                        <span className="font-medium">
                          {timeSlots.find(slot => slot.id === selectedTimeSlot)?.label} - {selectedDate}
                        </span>
                      </div>
                    )}
                    <div className="flex justify-between">
                      <span className="text-gray-600">Th·ªùi gian ho√†n th√†nh:</span>
                      <span className="font-medium">
                        {relationships.find(r => r.id === selectedRelationship)?.duration}
                      </span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-600">Gi√° d·ª± ki·∫øn:</span>
                      <span className="font-medium text-lg text-blue-600">
                        {selectedService === 'civil' 
                          ? relationships.find(r => r.id === selectedRelationship)?.civilPrice
                          : relationships.find(r => r.id === selectedRelationship)?.legalPrice}
                      </span>
                    </div>
                  </div>
                </div>

                <div className="p-4 bg-blue-50 rounded-lg border border-blue-200">
                  <h4 className="font-semibold text-blue-900 mb-2">Quy tr√¨nh ti·∫øp theo:</h4>
                  <ul className="text-blue-800 text-sm space-y-1">
                    <li>‚Ä¢ Ch√∫ng t√¥i s·∫Ω li√™n h·ªá trong v√≤ng 30 ph√∫t ƒë·ªÉ x√°c nh·∫≠n</li>
                    <li>‚Ä¢ G·ª≠i h·ª£p ƒë·ªìng v√† h∆∞·ªõng d·∫´n chi ti·∫øt qua email</li>
                    {selectedLocation === 'home' && selectedHomeOption === 'staff_visit' && (
                      <li>‚Ä¢ Nh√¢n vi√™n ƒë·∫øn thu m·∫´u theo l·ªãch h·∫πn</li>
                    )}
                    {selectedLocation === 'home' && selectedHomeOption === 'diy_kit' && (
                      <li>‚Ä¢ G·ª≠i b·ªô kit t·ª± thu m·∫´u ƒë·∫øn ƒë·ªãa ch·ªâ c·ªßa b·∫°n</li>
                    )}
                    {selectedLocation === 'facility' && (
                      <li>‚Ä¢ B·∫°n ƒë·∫øn c∆° s·ªü theo l·ªãch h·∫πn</li>
                    )}
                    <li>‚Ä¢ Th√¥ng b√°o k·∫øt qu·∫£ qua SMS/Email khi ho√†n th√†nh</li>
                  </ul>
                </div>

                <div className="flex items-center space-x-2 text-sm text-gray-600">
                  <input type="checkbox" id="terms" className="rounded" />
                  <label htmlFor="terms">
                    T√¥i ƒë·ªìng √Ω v·ªõi <a href="#" className="text-blue-600 hover:underline">ƒëi·ªÅu kho·∫£n d·ªãch v·ª•</a> v√† 
                    <a href="#" className="text-blue-600 hover:underline ml-1">ch√≠nh s√°ch b·∫£o m·∫≠t</a>
                  </label>
                </div>

                <div className="flex space-x-4">
                  <Button variant="outline" onClick={() => setStep(4)} className="flex-1">
                    Quay l·∫°i
                  </Button>
                  <Button className="flex-1 bg-gradient-to-r from-blue-600 to-green-600" onClick={handleConfirmBooking}>
                    X√°c nh·∫≠n ƒë·∫∑t l·ªãch
                    <CheckCircle className="w-4 h-4 ml-2" />
                  </Button>
                </div>
              </CardContent>
            </Card>
          )}
        </div>
      </div>

      <Footer />
    </div>
  );
}
